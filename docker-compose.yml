
version: '2.1'

services:
  consumer:
    container_name: consumer
    restart: always
    build: ./consumer/
    environment:
      DOCKER: 1
      DATABASE: POSTGRES
      OFFSET_STORAGE: REDIS
    volumes:
      - ./consumer:/consumer
    ports:
      - 8000:8000
    depends_on:
      - cassandra
      - postgres
      - redis
      - kafka
      - zookeeper
    entrypoint: 'python3 -u /consumer/manage.py'

  producer:
    container_name: producer
    restart: always
    build: ./producer/
    environment:
      DOCKER: 1
    volumes:
      - ./producer:/producer
    ports:
      - 5500:5500
    depends_on:
      - postgres
      - kafka
      - zookeeper
    entrypoint: 'python3 -u /producer/manage.py'

  cassandra:
    container_name: cassandra
    image: cassandra
    ports:
      - '7000:7000'
      - '9042:9042'
    restart: always

  postgres:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: movies
    ports:
      - '5432:5432'
    volumes:
      - ./postgres:/var/lib/postgresql/data

  zookeeper:
    restart: always
    container_name: zookeeper
    image: 'wurstmeister/zookeeper:latest'
    ports:
      - '2181:2181'

  kafka:
    container_name: kafka
    image: 'wurstmeister/kafka:latest'
    restart: always
    ports:
      - '9092:9092'
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"

  redis:
    container_name: redis
    image: redis
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - ./redis:/data

